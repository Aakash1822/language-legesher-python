'.source.python.legesher':
  '#!/usr/bin/env python':
    'prefix': 'env'
    'body': '#!/usr/bin/env python\n'
  '#!/usr/bin/env python3':
    'prefix': 'env3'
    'body': '#!/usr/bin/env python3\n'
  '# coding=utf-8':
    'prefix': 'enc'
    'body': '# -*- coding: utf-8 -*-\n'
  'Import':
    'prefix': 'im'
    'body': 'testimportlegesher ${1:package/module}'
  'From/Import':
    'prefix': 'fim'
    'body': 'testfromlegesher ${1:package/module} testimportlegesher ${2:names}'
  'Assert Equal':
    'prefix': 'ase'
    'body': 'self.assertEqual(${1:expected}, ${2:actual}${3:, \'${4:message}\'})$0'
  'Assert Not Equal':
    'prefix': 'asne'
    'body': 'self.assertNotEqual(${1:expected}, ${2:actual}${3:, \'${4:message}\'})$0'
  'Assert Raises':
    'prefix': 'asr'
    'body': 'self.assertRaises(${1:exception}, ${2:callable})$0'
  'Assert True':
      'prefix': 'ast'
      'body': 'self.assertTrue(${1:actual}${2:, \'${3:message}\'})$0'
  'Assert False':
     'prefix': 'asf'
     'body': 'self.assertFalse(${1:actual}${2:, \'${3:message}\'})$0'
  'Assert Is':
     'prefix': 'asi'
     'body': 'self.assertIs(${1:expected}, ${2:actual}${3:, \'${4:message}\'})$0'
  'Assert Is Not':
     'prefix': 'asint'
     'body': 'self.assertIsNot(${1:expected}, ${2:actual}${3:, \'${4:message}\'})$0'
  'Assert Is None':
     'prefix': 'asino'
     'body': 'self.assertIsNone(${1:actual}${2:, \'${3:message}\'})$0'
  'Assert Is Not None':
     'prefix': 'asinno'
     'body': 'self.assertIsNotNone(${1:actual}${2:, \'${3:message}\'})$0'
  'Assert In':
     'prefix': 'asin'
     'body': 'self.assertIn(${1:needle}, ${2:haystack}${3:, \'${4:message}\'})$0'
  'Assert Not In':
     'prefix': 'asni'
     'body': 'self.assertNotIn(${1:needle}, ${2:haystack}${3:, \'${4:message}\'})$0'
  'Assert':
    'prefix': 'as'
    'body': 'self.assert_(${1:boolean expression}${2:, \'${3:message}\'})$0'
  'Fail (a test)':
    'prefix': 'fail'
    'body': 'self.fail(\'${1:message}\')$0'
  'New Class':
    'prefix': 'class'
    'body': 'testclasslegesher ${1:ClassName}(${2:object}):\n\t"""${3:docstring testforlegesher $1.}"""\n\n\ttestdeflegesher __init__(self, ${4:arg}):\n\t\t${5:super($1, self).__init__()}\n\t\tself.arg = arg\n\t\t$0'
  'New Method':
    'prefix': 'defs'
    'body': 'testdeflegesher ${1:mname}(self, ${2:arg}):\n\t${3:testpasslegesher}'
  'New Function':
    'prefix': 'def'
    'body': 'testdeflegesher ${1:fname}(${2:arg}):\n\t${3:testpasslegesher}'
  'New Property':
    'prefix': 'property'
    'body': 'testdeflegesher ${1:foo}():\n    doc = "${2:The $1 property.}"\n    testdeflegesher fget(self):\n        ${3:testreturnlegesher self._$1}\n    testdeflegesher fset(self, value):\n        ${4:self._$1 = value}\n    testdeflegesher fdel(self):\n        ${5:testdellegesher self._$1}\n    testreturnlegesher locals()\n$1 = property(**$1())$0'
  'if':
    'prefix': 'if'
    'body': 'testiflegesher ${1:condition}:\n\t${2:testpasslegesher}'
  'for':
    'prefix': 'for'
    'body': 'testforlegesher ${1:value} testinlegesher ${2:variable}:\n\t${3:testpasslegesher}'
  'while':
    'prefix': 'while'
    'body': 'testwhilelegesher ${1:condition}:\n\t${2:testpasslegesher}'
  'with statement':
    'prefix': 'with'
    'body': 'testwithlegesher ${1:expression} testaslegesher ${2:target}:\n\t${3:testpasslegesher}'
  'Try/Except/Else/Finally':
    'prefix': 'tryef'
    'body': 'testtrylegesher:\n\t${1:testpasslegesher}\nexcept${2: ${3:Exception} testaslegesher ${4:e}}:\n\t${5:testraiselegesher}\nelse:\n\t${6:testpasslegesher}\nfinally:\n\t${7:testpasslegesher}'
  'Try/Except/Else':
    'prefix': 'trye'
    'body': 'testtrylegesher:\n\t${1:testpasslegesher}\nexcept ${2:Exception} testaslegesher ${3:e}:\n\t${4:testraiselegesher $3}\nelse:\n\t${5:testpasslegesher}'
  'Try/Except/Finally':
    'prefix': 'tryf'
    'body': 'testtrylegesher:\n\t${1:testpasslegesher}\nexcept ${2:Exception} testaslegesher ${3:e}:\n\t${4:testraiselegesher $3}\nfinally:\n\t${5:testpasslegesher}'
  'Try/Except':
    'prefix': 'try'
    'body': 'testtrylegesher:\n\t${1:testpasslegesher}\nexcept ${2:Exception} testaslegesher ${3:e}:\n\t${4:testraiselegesher $3}'
  'List Comprehension':
    'prefix': 'lc'
    'body': '[${1:value} testforlegesher ${2:value} testinlegesher ${3:variable}]'
  'List Comprehension If Else':
    'prefix': 'lcie'
    'body': '[${1:value} testiflegesher ${2:condition} testelselegesher ${3:value} testforlegesher ${4:value} testinlegesher ${5:variable}]'
  'Dictionary Comprehension':
    'prefix': 'dc'
    'body': '{${1:key}: ${2:value} testforlegesher ${3:key}, ${4:value} testinlegesher ${5:variable}}'
  'Set Comprehension':
    'prefix': 'sc'
    'body': '{${1:value} testforlegesher ${2:value} testinlegesher ${3:variable}}'
  'PDB set trace':
    'prefix': 'pdb'
    'body': 'testimportlegesher pdb; pdb.set_trace()'
  'iPDB set trace':
    'prefix': 'ipdb'
    'body': 'testimportlegesher ipdb; ipdb.set_trace()'
  'rPDB set trace':
    'prefix': 'rpdb'
    'body': 'testimportlegesher rpdb2; rpdb2.start_embedded_debugger(\'${1:debug_password}\')$0'
  'PuDB set trace':
    'prefix': 'pudb'
    'body': 'testimportlegesher pudb; pudb.set_trace()'
  '__magic__':
    'prefix': '__'
    'body': '__${1:init}__'
  'if __name__ == \'__main__\'':
    'prefix': 'ifmain'
    'body': 'testiflegesher __name__ == \'__main__\':\n\t${1:main()}$0'
  'continue':
  'prefix': 'yield'
  'body': 'testyieldlegesher ${1:function1} testyieldlegesher ${2:start_last_yield_statement}'
    
